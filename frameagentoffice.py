# -*- coding: utf-8 -*-
import os
import subprocess
import time
from random import random, randint

# Form implementation generated from reading ui file 'agent.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector as mc
import traceback

from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.figure import Figure
from matplotlib_inline.backend_inline import FigureCanvas

import pychart
from graph import Ui_MainWindow
# from pychart import *
from PyQt5.QtWidgets import QTableWidgetItem, QDialog, QMainWindow, QApplication, QWidget, QVBoxLayout, QLabel
from agentdialog import Agent_Dialog

from PyQt5.QtWidgets import QApplication, QMainWindow
# from PyQt5.QtCharts import QChart, QChartView, QPieSeries
from PyQt5 import QtChart
from PyQt5.QtChart import QPieSeries, QChart, QChartView
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import Qt
import sys

from pyqtchart import Ui_Dialog


class Window(QMainWindow):
    print()
    no_rent = 0
    no_sold = 0
    no_reg = 0

    def __init__(self, x, y, z, parent=None):
        self.no_rent = x
        self.no_sold = y
        self.no_reg = z
        super(Window, self).__init__(parent)
        self.setGeometry(980, 20, 461, 371)
        self.setWindowTitle("Agent Report")
        self.setWindowIcon(QIcon('PN.jpg'))
        self.pie_chart()

    def pie_chart(self):
        series = QPieSeries()

        print(self.no_sold)
        print(self.no_rent)
        print(self.no_reg)
        # self.no_reg=3
        # self.no_rent=4
        # self.no_sold=5
        series.append("No. of properties rented", self.no_rent)
        series.append("No. of properties sold", self.no_sold)
        series.append("No. of properties registered", self.no_reg)

        # add slice
        my_slice = series.slices()[2]
        my_slice.setExploded(True)
        my_slice.setLabelVisible(True)

        chart = QChart()
        chart.addSeries(series)
        chart.setAnimationOptions(QChart.AnimationOption.AllAnimations)
        chart.setTitle("Agent report")
        chart.setTheme(QChart.ChartTheme.ChartThemeBlueIcy)
        # chart.legend().setVisible(False)
        # chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)
        chartview = QChartView(chart)
        widget = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(chartview)
        widget.setLayout(layout)
        self.setCentralWidget(chartview)
        print("test")


def run_chart(no_rent, no_sold, no_reg):
    print(no_sold)
    print(no_rent)
    print(no_reg)
    # pychart = QApplication(sys.argv)
    window = Window(no_rent, no_sold, no_reg)

    time.sleep(5)
    # app.exec()
    # pychart.exec()
    window.show()


class Agentoffice_MainWindow(object):
    def __init__(self):
        self.UI = None
        self.chart = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1603, 824)
        MainWindow.setStyleSheet("*{\n"
                                 "font-family: century gothic;\n"
                                 "\n"
                                 "}\n"
                                 "QFrame\n"
                                 "{\n"
                                 " background: #470787;\n"
                                 "}\n"
                                 "#frame_dark\n"
                                 "{\n"
                                 "background: #350565;\n"
                                 "border-top-right-radius:100px;\n"
                                 "}\n"
                                 "#frame_2\n"
                                 "{\n"
                                 "background: #350565;\n"
                                 "}\n"
                                 "#frame_3\n"
                                 "{\n"
                                 "background: white;\n"
                                 "border-top-left-radius: 100px;\n"
                                 "}\n"
                                 "#frame_bottom\n"
                                 "{\n"
                                 "background:#470787;\n"
                                 "}\n"
                                 "QToolButton\n"
                                 "{\n"
                                 "border-style: solid;\n"
                                 " border-width:2px;\n"
                                 " border-radius:15px;\n"
                                 "background:#af69ef;\n"
                                 "}\n"
                                 "QToolButton:hover\n"
                                 "{\n"
                                 "border-style: solid;\n"
                                 "border-width:2px;\n"
                                 "border-radius:15px;\n"
                                 "background-color:#49ebff;\n"
                                 "color:white;\n"
                                 "}\n"
                                 "QLabel\n"
                                 "{\n"
                                 "color:white;\n"
                                 "font-weight:bold;\n"
                                 "font-style:montserrat;\n"
                                 "font-size:21px;\n"
                                 "}\n"
                                 "#pn\n"
                                 "{\n"
                                 "border-image:url(:/images/PN.jpg);\n"
                                 "}\n"
                                 "#empname\n"
                                 "{\n"
                                 " background: #470787;\n"
                                 "color: white;\n"
                                 "border-radius:0;\n"
                                 "}\n"
                                 "QLabel\n"
                                 "{\n"
                                 "background:rgb(225, 225, 225,100);\n"
                                 "border:none;\n"
                                 "color:#717072;\n"
                                 "border-radius:15%;\n"
                                 "}\n"
                                 "\n"
                                 "QPushButton\n"
                                 "{\n"
                                 "background:#af69ee;\n"
                                 "border-radius:60px;\n"
                                 "color:white;\n"
                                 "border-radius:15px;\n"
                                 "}\n"
                                 "QPushButton:hover\n"
                                 "{\n"
                                 "background:#49ebff;\n"
                                 "color:#333;\n"
                                 "border-radius:15px;\n"
                                 "}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-10, 0, 1621, 181))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_dark = QtWidgets.QFrame(self.frame)
        self.frame_dark.setGeometry(QtCore.QRect(0, 69, 1031, 151))
        self.frame_dark.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_dark.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_dark.setObjectName("frame_dark")
        self.empname = QtWidgets.QLabel(self.frame_dark)
        self.empname.setGeometry(QtCore.QRect(120, 0, 341, 41))
        self.empname.setObjectName("empname")
        self.pn = QtWidgets.QFrame(self.frame)
        self.pn.setGeometry(QtCore.QRect(1430, 0, 181, 80))
        self.pn.setStyleSheet("border-image: url(:/images/PN.jpg);")
        self.pn.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.pn.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pn.setObjectName("pn")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(0, 120, 141, 701))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.toolButton = QtWidgets.QToolButton(self.frame_2)
        self.toolButton.setGeometry(QtCore.QRect(10, 160, 81, 81))
        self.toolButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/user-tie-solid.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon)
        self.toolButton.setIconSize(QtCore.QSize(50, 100))
        self.toolButton.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.toolButton.setObjectName("toolButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 0, 101, 101))
        self.pushButton_2.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/images/profile.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setIconSize(QtCore.QSize(100, 100))
        self.pushButton_2.setObjectName("pushButton_2")
        self.toolButton_2 = QtWidgets.QToolButton(self.frame_2)
        self.toolButton_2.setGeometry(QtCore.QRect(10, 250, 81, 22))
        font = QtGui.QFont()
        font.setFamily("century gothic")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_2.setFont(font)
        self.toolButton_2.setStyleSheet("border-radius:15%;")
        self.toolButton_2.setObjectName("toolButton_2")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(110, 140, 1511, 681))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.tabWidget = QtWidgets.QTabWidget(self.frame_3)
        self.tabWidget.setGeometry(QtCore.QRect(50, 380, 1381, 231))
        font = QtGui.QFont()
        font.setFamily("century gothic")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.tabWidget.setStyleSheet("border-color: rgb(197, 197, 197);\n"
                                     "selection-background-color: rgb(199, 69, 255);\n"
                                     "selection-color: rgb(184, 255, 247);")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setUsesScrollButtons(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.agentreport = QtWidgets.QTableWidget(self.tab)
        self.agentreport.setGeometry(QtCore.QRect(0, 0, 1381, 211))
        self.agentreport.setStyleSheet("background-color: rgb(212, 212, 212);\n"
                                       "font: 75 9pt \"MS Shell Dlg 2\";\n"
                                       "\n"
                                       "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(148, 0, 255, 255), stop:1 rgba(255, 255, 255, 255));\n"
                                       "\n"
                                       "gridline-color: rgb(125, 0, 188);")
        self.agentreport.setObjectName("agentreport")
        self.agentreport.setColumnCount(7)
        self.agentreport.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.agentreport.setHorizontalHeaderItem(6, item)
        self.agentreport.horizontalHeader().setDefaultSectionSize(200)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/images/icons8-list-64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.tab, icon2, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.tab_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 1381, 211))
        self.tableWidget_2.setStyleSheet("background-color: rgb(220, 220, 220);\n"
                                         "font: 75 9pt \"MS Shell Dlg 2\";\n"
                                         "border-top-color: rgb(194, 194, 194);\n"
                                         "border-color: rgb(191, 191, 191);\n"
                                         "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(148, 0, 255, 255), stop:1 rgba(255, 255, 255, 255));\n"
                                         "")
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(7)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(6, item)
        self.tableWidget_2.horizontalHeader().setDefaultSectionSize(200)
        self.tabWidget.addTab(self.tab_2, icon2, "")
        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setGeometry(QtCore.QRect(50, 90, 911, 81))
        self.label.setObjectName("label")
        self.lineEdit_agentID = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit_agentID.setGeometry(QtCore.QRect(280, 110, 441, 41))
        self.lineEdit_agentID.setObjectName("lineEdit_agentID")
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setGeometry(QtCore.QRect(50, 190, 901, 101))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.frame_3)
        self.pushButton.setGeometry(QtCore.QRect(790, 100, 131, 61))
        font = QtGui.QFont()
        font.setFamily("century gothic")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        self.label_3.setGeometry(QtCore.QRect(980, 20, 491, 371))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.frame_3)
        self.label_4.setGeometry(QtCore.QRect(-90, 630, 1581, 91))
        self.label_4.setStyleSheet("background: #470787;")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        # self.pushButton_3 = QtWidgets.QPushButton(self.frame_3)
        # self.pushButton_3.setGeometry(QtCore.QRect(1150, 330, 151, 51))
        font = QtGui.QFont()
        font.setFamily("century gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        # self.pushButton_3.setFont(font)
        # self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_4.setGeometry(QtCore.QRect(1020, 30, 401, 51))
        font = QtGui.QFont()
        font.setFamily("century gothic")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_5 = QtWidgets.QLabel(self.frame_3)
        self.label_5.setGeometry(QtCore.QRect(1050, 90, 341, 231))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("C:/Users/ashut/Downloads/5031659-removebg-preview.png"))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1603, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def Agentreport(self):
        agent_id = str(self.lineEdit_agentID.text())
        # self.ui = Agentoffice_MainWindow()

        print(agent_id)  # input
        try:
            mydb = mc.connect(
                host="localhost",
                user="root",
                password="Yash@2914",
                database="dbms_project"
            )
            cursor = mydb.cursor()
            query = "SELECT st.emp_ID_buyer,  p.p_type, p.address_line_1, p.address_line_2, p.address_line_3, p.selling_price,st.date from seller s join property p join status  st on s.seller_id=p.seller_id and st.p_id=p.p_id and p.mode like 'Sold' and emp_ID_buyer like '" + agent_id + "'"
            query2 = "SELECT st.emp_ID_buyer,  p.p_type, p.address_line_1, p.address_line_2, p.address_line_3, p.selling_price,st.date from seller s join property p join status  st on s.seller_id=p.seller_id and st.p_id=p.p_id and p.mode like 'Rented' and emp_ID_buyer like '" + agent_id + "'"

            cursor.execute(query)
            result = cursor.fetchall()
            self.agentreport.setRowCount(0)

            for row_Number, row_data in enumerate(result):
                self.agentreport.insertRow(row_Number)
                for column_Number, data in enumerate(row_data):
                    self.agentreport.setItem(row_Number, column_Number, QTableWidgetItem(str(data)))

            cursor.execute(query2)
            result = cursor.fetchall()
            self.tableWidget_2.setRowCount(0)
            for row_Number, row_data in enumerate(result):
                self.tableWidget_2.insertRow(row_Number)
                for column_Number, data in enumerate(row_data):
                    self.tableWidget_2.setItem(row_Number, column_Number, QTableWidgetItem(str(data)))

        except mc.Error as e:
            traceback.print_exc()

    def pychart(self):
        # pychart.run_chart(1, 2, 3)

        no_rent = 0
        no_sold = 0
        no_reg = 0
        agent_id = str(self.lineEdit_agentID.text())
        try:
            mydb = mc.connect(
                host="localhost",
                user="root",
                password="Yash@2914",
                database="dbms_project"
            )
            print(agent_id)
            cursor = mydb.cursor()
            query = "select count(emp_ID_buyer) from property join status where mode = 'Rented' and emp_ID_buyer like '" + str(
                agent_id) + "' and status.p_id=property.p_id"
            query2 = "select count(emp_ID_buyer) from property join status where mode = 'Sold' and emp_ID_buyer like '" + str(
                agent_id) + "' and status.p_id=property.p_id"
            query3 = "select count(emp_id) from seller where emp_id like '" + str(agent_id) + "'"
            cursor.execute(query)
            result = cursor.fetchone()
            cursor.execute(query2)
            result1 = cursor.fetchone()
            cursor.execute(query3)
            result2 = cursor.fetchone()
            no_rent = int(result[0])
            no_sold = int(result1[0])
            no_reg = int(result2[0])
            # print('here')
            # print(result2[0])
            # print(type(no_rent))
        except mc.Error as e:
            traceback.print_exc()

        print("test")
        # self.chart = QMainWindow()
        # print("test")
        # self.UI = Window(no_rent, no_sold, no_reg)
        # print("test")
        # self.UI.setupUi(self.chart)
        # print("test")
        # self.chart.show()
        # pychart.run_chart(no_rent, no_sold, no_reg)
        # app = QApplication(sys.argv)
        # window = Window(no_rent, no_sold, no_reg)
        # # os.system("pychart.py")
        # # cmd_str= "python E:\dbms_project\pychart.py"
        # # subprocess.run(cmd_str, shell=True)
        # print("test before show")
        # window.show()
        # app.exec()
        # print("test after show")
        # Define some data
        # Define some data
        import sys
        # from PyQt5.QtWidgets import QMainWindow, QWidget, QVBoxLayout, QApplication
        # from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
        # from matplotlib.figure import Figure
        # from matplotlib.animation import FuncAnimation
        # import random

        # Define some data
        # labels = ['Apples', 'Bananas', 'Oranges', 'Peaches']
        # sizes = [20, 30, 25, 15]
        #
        # # Create a figure and axis object
        # fig, ax = plt.subplots()
        #
        # # Create the initial pie chart
        # pie_chart = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        #
        # # Define the update function for the animation
        # def update(frame):
        #     # Generate new data
        #     new_sizes = [randint(0, 50) for i in range(4)]
        #
        #     # Update the sizes of the pie slices
        #     for i, slice in enumerate(pie_chart[0]):
        #         slice.set_sizes([new_sizes[i]])
        #
        #     # Return the updated artists
        #     return pie_chart

        # Create the animation object
        # animation = FuncAnimation(fig, update, frames=10, interval=1000)

        # Show the plot
        # plt.show()
        # plt.savefig("E:/dbms_project/image_chart.png")
        # # self.dialog = QDialog()
        # # self.UI = Ui_Dialog()
        # # self.UI.setupUi(self.dialog)
        # # self.dialog.show()
        # # app = QApplication([])
        # window = QWidget()

        # Create a QPixmap object from the image file
        # pixmap = QPixmap('E:/dbms_project/image_chart.png')
        #
        # # Scale the pixmap to the desired size
        # scaled_pixmap = pixmap.scaled(100, 100)
        #
        # # Create a QLabel and set its pixmap to the scaled pixmap
        # label = QLabel()
        # label.setPixmap(scaled_pixmap)
        #
        # # Add the label to the window and show the window
        # window.setCentralWidget(label)
        # window.show()
        # app.exec_()
        self.label_2.setText(
            "NUMBER OF PROPERTIES REGISTERED : " + str(no_reg) + "    SOLD: " + str(no_sold) + "    RENTED: " + str(no_rent))

    import form_rc
    import res_rc
    def agent_dialog(self):
        self.dialog = QDialog()
        self.UI = Agent_Dialog()
        self.UI.setupUi(self.dialog)
        self.dialog.show()
        try:
            mydb = mc.connect(
                host="localhost",
                user="root",
                password="Yash@2914",
                database="dbms_project"
            )
            cursor = mydb.cursor()
            query = "SELECT * from employee where designation = 'Agent'"
            cursor.execute(query)
            result = cursor.fetchall()
            self.UI.tableWidget.setRowCount(0)
            for row_Number, row_data in enumerate(result):
                self.UI.tableWidget.insertRow(row_Number)
                for column_Number, data in enumerate(row_data):
                    self.UI.tableWidget.setItem(row_Number, column_Number,
                                                QTableWidgetItem(str(data)))

        except mc.Error as e:
            traceback.print_exc()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.empname.setText(_translate("MainWindow", " EMPLOYEE_ID"))
        self.toolButton_2.setText(_translate("MainWindow", "AGENTS"))
        item = self.agentreport.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Agent ID"))
        item = self.agentreport.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Date of Sale"))
        item = self.agentreport.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Property type"))
        item = self.agentreport.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Address Line 1"))
        item = self.agentreport.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Address Line2 "))
        item = self.agentreport.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Address Line 3"))
        item = self.agentreport.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Selling Price"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "PROPERY SOLD"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Agent ID"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Date of Rent"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Property Type"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Address Line1"))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Address Line2"))
        item = self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Address Line3"))
        item = self.tableWidget_2.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Renting Price"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "PROPERTY RENTED"))
        self.label.setText(_translate("MainWindow", "  ENTER THE AGENT ID: "))
        self.label_2.setText(_translate("MainWindow", "AGENT REPORT"))
        self.pushButton.setText(_translate("MainWindow", "SUBMIT"))
        # self.pushButton_3.setText(_translate("MainWindow", "VIEW CHART"))
        self.pushButton_4.setText(_translate("MainWindow", "Agent statistics"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Agentoffice_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
